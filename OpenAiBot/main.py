import openai
import logging
from aiogram.types import Message
from aiogram import Bot, Dispatcher, executor, types
from environs import Env

env = Env()
env.read_env()

bot_token = env('BOT_TOKEN')
api_key = env('API_KEY')

API_TOKEN: str = bot_token
API_KEY: str = api_key

logging.basicConfig(level=logging.INFO)

bot: Bot = Bot(token=API_TOKEN, parse_mode='HTML')
dp: Dispatcher = Dispatcher(bot)


@dp.message_handler(commands='start')
async def process_start_command(message: Message):
    question = message.get_args()
    if not question:
        await bot.send_message(chat_id=message.chat.id, text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –º–µ–Ω—è –∑–æ–≤—É—Ç Eva\n"
                                                             "–Ø —Å–≤—è–∑–∞–Ω–∞ —Å–≤–æ–µ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥—É—à–æ–π —Å ChatGPTü§ñ\n"
                                                             "–ü–æ—ç—Ç–æ–º—É –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å!üöÄ\n"
                                                             "–ó–∞–¥–∞–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å ‚¨áÔ∏è")
        return


@dp.message_handler(commands=['help'])
async def process_help_command(message: Message):
    await message.answer('–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—à—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç.\n'
                         '–ì–ª–∞–≤–Ω–æ–µ –Ω–µ –∑–∞–±—É–¥—å –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å‚ùì\n'
                         '–Ø –Ω–µ –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—é –±—ã—Å—Ç—Ä–æ, –¥–∞–π –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏‚è≥\n'
                         '–ö—Å—Ç–∞—Ç–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è –ø–æ–Ω–∏–º–∞—é –Ω–∞–º–Ω–æ–≥–æ –ª—É—á—à–µ –∏ –æ—Ç–≤–µ—á–∞—é –±—ã—Å—Ç—Ä–µ–µ!')


@dp.message_handler()
async def process_other_text_answers(message: Message):
    openai.api_key = API_KEY
    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=f"Answer the following question: {message.text}",
        max_tokens=1024,
        n=1,
        stop=None,
        temperature=0.5,
    )

    answer = response["choices"][0]["text"].strip()

    await bot.send_message(chat_id=message.chat.id, text=answer)


async def set_main_menu(dp: Dispatcher):
    main_menu_commands = [
        types.BotCommand(command='/start', description='–°—Ç–∞—Ä—Ç‚úÖ'),
        types.BotCommand(command='/help', description='–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞')
    ]
    await dp.bot.set_my_commands(main_menu_commands)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=set_main_menu)
